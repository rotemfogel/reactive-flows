akka {
  loggers          = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter   = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel         = debug
  log-dead-letters = off
  stdout-loglevel  = debug

  actor {
    allow-java-serialization = off
    provider                 = cluster

    serialization-bindings {
      "de.heikoseeberger.reactiveflows.Flow$Serializable"       = flow-serializer
      "de.heikoseeberger.reactiveflows.FlowFacade$Serializable" = flow-facade-serializer
    }

    serializers {
      flow-serializer        = "de.heikoseeberger.reactiveflows.proto.FlowSerializer"
      flow-facade-serializer = "de.heikoseeberger.reactiveflows.proto.FlowFacadeSerializer"
    }
  }

  cluster {
    sharding {
      remember-entities = on
      state-store-mode  = persistence
    }
  }

  extensions = [
    akka.cluster.ddata.DistributedData,
    akka.persistence.Persistence,
    de.heikoseeberger.constructr.ConstructrExtension
  ]

  persistence {
    journal {
      auto-start-journals = [cassandra-journal]
      plugin              = cassandra-journal
    }

    snapshot-store {
      auto-start-snapshot-stores = [cassandra-snapshot-store]
      plugin                     = cassandra-snapshot-store
    }
  }
}

reactive-flows {
  api {
    address             = "0.0.0.0"
    port                = 8000
    flow-facade-timeout = 3 s
    event-buffer-size   = 100
    event-heartbeat     = 10 s
  }

  flow {
    passivation-timeout = 10 minutes
    shard-count         = 20
  }
}
